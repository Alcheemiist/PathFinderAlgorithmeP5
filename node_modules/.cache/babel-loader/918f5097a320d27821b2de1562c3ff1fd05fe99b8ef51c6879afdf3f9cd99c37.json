{"ast":null,"code":"var _jsxFileName = \"/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx\";\nimport React from 'react';\nimport Sketch from \"react-p5\";\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Node {\n  // _parent: Node;\n\n  constructor(_x, _y, _visited, _index) {\n    this.x = void 0;\n    this.y = void 0;\n    this.visited = void 0;\n    this.f = void 0;\n    this.g = void 0;\n    this.h = void 0;\n    this.index = void 0;\n    this.x = _x;\n    this.y = _y;\n    this.visited = _visited;\n    this.index = _index;\n    this.f = 0;\n    this.g = 0;\n    this.h = 0;\n    // this._parent = new Node(0, 0, false, 0);\n    ;\n  }\n  setX(x) {\n    this.x = x;\n  }\n  setY(y) {\n    this.y = y;\n  }\n  setF(f) {\n    this.f = f;\n  }\n  setf() {\n    this.f = Math.abs(this.g + this.h);\n  }\n  setG(g) {\n    this.g = g;\n  }\n  setH(h) {\n    this.h = h;\n  }\n  setVisited(visited) {\n    this.visited = visited;\n  }\n  // setParent(parent : Node) {  this._parent = parent; }\n\n  getX() {\n    return this.x;\n  }\n  getY() {\n    return this.y;\n  }\n  getF() {\n    return this.f;\n  }\n  getG() {\n    return this.g;\n  }\n  getH() {\n    return this.h;\n  }\n  getVisited() {\n    return this.visited;\n  }\n  // getParent() { return this._parent; }\n}\n\nconst width = 1440;\nconst height = 800;\nconst Xb = width / 20;\nconst Yb = height / 20;\nvar Xpointx = 0;\nvar Xpointy = 0;\nvar Ypointy = 0;\nvar Ypointx = 0;\nexport default function Dashboard() {\n  var exp = false;\n  var sep = false;\n  var isFound = false;\n  let Board = new Array(Xb * Yb).fill(0);\n  var Step = 0;\n  let BoardNode = new Array(Xb).fill(new Array(Yb).fill(new Node(0, 0, false, 0)));\n\n  //BoardNode[0][0] = new Node(0, 0, false, 0);\n\n  // \n  // acces with Board[y * Xb + x]\n  var state = {\n    board: {\n      Xb: Xb,\n      Yb: Yb,\n      Board: Board\n    },\n    data: {\n      expX: 0,\n      expY: 0,\n      sepX: 0,\n      sepY: 0\n    }\n  };\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(width, height).parent(canvasParentRef);\n    p5.stroke(50); // Set line drawing color to white\n    p5.frameRate(10);\n    p5.background('#222222');\n    for (let i = 0; i < 1400; i += 20) {\n      p5.line(i, 0, i, 1400);\n    }\n    for (let i = 0; i < 680; i += 20) {\n      p5.line(0, i, 1400, i);\n    }\n    state.board.Board = Board;\n    state.board.Xb = Xb;\n    state.board.Yb = Yb;\n  };\n  const infoBoard = p5 => {\n    p5.fill(\"white\");\n    if (exp || sep) p5.rect(0, 0, 230, 200);else p5.rect(0, 0, 230, 150);\n    p5.fill(\"darkblue\");\n    p5.stroke(\"darkblue\");\n    p5.text(\"Xb : \" + Xb + \" , Yb :\" + Yb, 130, 20);\n    p5.text(\"key pressed : [ \" + p5.key + \" ]\", 20, 20);\n    p5.text(\"mouse presse : [\" + p5.mouseIsPressed + \"]\", 20, 40);\n    p5.text(\"Press s : select first square\", 20, 60);\n    p5.text(\"Press e : select second square\", 20, 80);\n    p5.text(\"Press w : select wall square\", 20, 100);\n    p5.text(\"Press p : Use Path Finder\", 20, 120);\n    p5.text(\"Press r : Reset\", 20, 140);\n    if (sep) {\n      p5.text(\"Y : \" + state.data.sepY + \", \" + state.data.sepX, 20, 170);\n    }\n    if (exp) {\n      p5.text(\"X : \" + state.data.expY + \", \" + state.data.expX, 20, 190);\n    }\n  };\n  const drawBoardElements = p5 => {\n    for (let i = 0; i < Xb; i++) for (let j = 0; j < Yb; j++) {\n      // white 0; red 2; green 3; brown 4; yellow 8;  black;\n      if (Board[j * Xb + i] === 0) {\n        p5.fill(\"white\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 2) {\n        p5.fill(\"red\");\n        p5.square(i * 20, j * 20, 20);\n        p5.text(\" X \", i * 20 + 3, j * 20 + 16);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 3) {\n        p5.fill(\"green\");\n        p5.square(i * 20, j * 20, 20);\n        p5.text(\" Y \", i * 20 + 3, j * 20 + 16);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 4) {\n        p5.fill(\"brown\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 8) {\n        p5.fill(\"orange\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else {\n        p5.fill(\"black\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      }\n    }\n    if (isFound) {\n      p5.fill(\"black\");\n      FindYourPath(state, p5);\n    }\n    infoBoard(p5);\n  };\n  //\n  const setWalls = p5 => {\n    // init default variables \n    // var x = 15 * 20 - 20;\n    // var y = 15 * 20 - 20;\n    // var dx2 = 71 * 20 - 20 ;\n    // var dy2 = 39 * 20 - 20;\n    var x = Xpointx;\n    var y = Xpointy;\n    var dx2 = Ypointx;\n    var dy2 = Ypointy;\n    p5.fill(\"orange\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n    // walls \n    for (var i = 0; i < 20; i++) Board[(10 + i) * Xb + 29] = 4;\n  };\n  const visualiziation = (p5, _queue) => {\n    // _queue is the path\n    var x = Xpointx;\n    var y = Xpointy;\n    var dx2 = Ypointx;\n    var dy2 = Ypointy;\n    // var x = 15 * 20 - 20;\n    // var y = 15 * 20 - 20;\n    // var dx2 = 71  * 20 - 20 ;\n    // var dy2 = 39  * 20 - 20;\n\n    // draw path\n    while (_queue.length > 0) {\n      var current = _queue[_queue.length - 1].index;\n      // p5.fill(\"orange\");\n      // p5.square((current % Xb) * unit, Math.floor(current / Xb) * unit, unit);\n      Board[current] = 8;\n      _queue.pop();\n    }\n    // drawing squars\n    p5.fill(\"green\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n  };\n  //\n  const Algo = p5 => {\n    // white 0; red 2; green 3; brown 4; yellow 8;  black;\n    // init default variables\n    setWalls(p5);\n    var x = Xpointx;\n    var y = Xpointy;\n    var dx2 = Ypointx;\n    var dy2 = Ypointy;\n    // var x = 15 * 20 - 20;\n    // var y = 15 * 20 - 20;\n    // var dx2 = 71 * 20 - 20 ;\n    // var dy2 = 39 * 20 - 20;\n    //\n    const unit = 20;\n    // \n    var Nodes = new Array(Xb * Yb).fill(Node);\n    var _queue = new Array();\n    var _start = Math.round(y / unit) * Xb + Math.round(x / unit);\n    var _end = Math.round(dy2 / unit) * Xb + Math.round(dx2 / unit);\n\n    // BFS \n    var Closed = new Array();\n    var Open = new Array();\n    var _visited = new Array(Xb * Yb).fill(false);\n    var _current = _start;\n\n    // set queue\n    while (_queue.length > 0) _queue.pop();\n    while (Closed.length > 0) Closed.pop();\n\n    // step 1\n    while (Open.length > 0) Open.pop();\n    Nodes[_start] = new Node(y, x, true, _start);\n    Nodes[_start].g = 1;\n    Nodes[_start].h = _end - _start;\n    Nodes[_start].f = Nodes[_start].g + Nodes[_start].h;\n    Open.push(Nodes[_start]);\n    _queue.push(Nodes[_start]);\n    while (Open.length > 0 && !isFound) {\n      // 1000\n      if (Step >= 1000 && false) {\n        isFound = true;\n        break;\n      }\n      // console.log(\"Step : \" , Step)\n      // console.log(\"Actual Open : \", Open.length ,\"\\n\")\n      // console.table (Open)\n\n      // step 2\n      if (Open.length <= 0) alert(\"Open is Empty\");\n      // step 3\n      var min = Open[0].f,\n        index = 0;\n      for (let i = 0; i < Open.length; i++) {\n        if (Open[i].f < min) {\n          min = Open[i].f;\n          index = i;\n        }\n      }\n      // remove the smallest element from the open list to the closed list\n      _current = Open[index].index;\n      Closed.push(Open[index]);\n      // console.log(\"index removed: \" , index , \"\\n\")\n      Open.splice(index, 1);\n      // console.log(\"min: \" , min , \"\\ncurrent: \" , _current, \" \")\n      // console.log(\"After Open: \", Open.length ,\"\\n\" )\n      console.table(Open);\n      // if node is goal then alert found \n      if (_current === _end) {\n        // alert(\"Found 1\")\n        isFound = true;\n        break;\n      }\n      // step 4\n      // find the neighbors of the current node\n      var Nq = new Array();\n      let tmp = new Node(_current - Xb, _current - Xb, false, _current - Xb);\n      let tmp1 = new Node(_current + 1, _current + 1, false, _current + 1);\n      let tmp2 = new Node(_current + Xb, _current + 1, false, _current + Xb);\n      let tmp3 = new Node(_current - 1, _current - 1, false, _current - 1);\n      if (!(_current % Xb === 0)) Nq.push(tmp3);\n      if (!(_current % Xb === 0 && (_current - 1) % Xb === 0)) Nq.push(tmp1);\n      if (_current > Xb - 1 && _current - Xb > 0) Nq.push(tmp);\n      if (_current < Yb * (Xb - 1)) Nq.push(tmp2);\n      console.log(\"Nq: \", Nq.length);\n      // step 5\n      for (let i = 0; i < Nq.length; i++) {\n        if (Nq[i].index === _end) {\n          // alert(\"END FOUND\")\n          isFound = true;\n          break;\n        }\n        if (Nq[i].index >= 0 && Nq[i].index < Xb * Yb && Board[Nq[i].index] !== 4 && _visited[Nq[i].index] === false) {\n          var tmpNode = new Node(Nq[i].y, Nq[i].x, true, Nq[i].index);\n          const IndexO = Nq[i].index;\n          // var DirH = widthIndexO - width_start \n          var DirH = Math.abs(widthIndexO - width_end) * 1;\n          var DirV = Math.abs(heightIndexO - height_end) * 1;\n          tmpG += DirH + DirV;\n          var tmpG = Math.abs(IndexO - _start) * 1;\n          var tmpH = Math.abs(_end - IndexO) * 1;\n          var Dis = _end - IndexO;\n          if (Dis) {\n            if (IndexO % Xb < _start % Xb) continue;\n          } else {\n            if (IndexO % Xb > _start % Xb) continue;\n          }\n          console.log(\" Nq[i].index : \", Nq[i].index, \"tmpG: \", tmpG, \"tmpH: \", tmpH);\n          tmpNode.setG(tmpG);\n          tmpNode.setH(tmpH);\n          tmpNode.setf();\n          Open.push(tmpNode);\n        }\n        _visited[Nq[i].index] = true;\n      }\n      Step++;\n      // console.table(\"Closed\", Closed)\n      console.table(\"---------------------\");\n    }\n\n    // step 6\n    for (let i = 0; i < Closed.length; i++) _queue.push(Closed[i]);\n    visualiziation(p5, _queue);\n  };\n  const handleAction = p5 => {\n    if (p5.key === 's' && exp === false) {\n      p5.fill(\"red\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 2;\n        exp = true;\n        state.data.expX = x;\n        state.data.expY = y;\n        p5.text(\"X : \" + x + \", \" + y, 20, 170);\n        Xpointx = x;\n        Xpointy = y;\n      }\n    }\n    if (p5.key === 'e' && sep === false) {\n      p5.fill(\"green\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 3;\n        sep = true;\n        state.data.sepX = x;\n        state.data.sepY = y;\n        p5.text(\"Y : \" + x + \", \" + y, 20, 190);\n        Ypointx = x;\n        Ypointy = y;\n        // setstate({\n        //   data :  {  \n        //     expX: x,\n        //     expY: y,\n        //     sepX: state.data.sepX,\n        //     sepY: state.data.sepY,\n        //   }})\n      }\n    }\n\n    if (p5.key === 'w') {\n      p5.fill(\"brown\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n\n        // if (Board[Math.round(y / 20) * Xb + Math.round(x / 20)] == 4)\n        //   Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 0;\n        // else\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 4;\n        sep = true;\n      }\n    }\n    if (p5.key === 'r') {\n      exp = false;\n      sep = false;\n      isFound = false;\n      for (let i = 0; i < Xb; i++) {\n        for (let j = 0; j < Yb; j++) if (Board[j * Xb + i] === 2 || Board[j * Xb + i] === 3 || Board[j * Xb + i] === 4) Board[j * Xb + i] = 0;\n      }\n      let curr = 0;\n      while (curr < Board.length) {\n        if (Board[curr] === 8) Board[curr] = 0;\n        curr++;\n      }\n    }\n    if (p5.key === 'p' && exp === true && sep === true && isFound === false) {\n      FindYourPath(state, p5);\n      isFound = true;\n    }\n    if (p5.key === 'ñ' || p5.key === ';') {\n      Algo(p5);\n    }\n  };\n  const draw = p5 => {\n    drawBoardElements(p5);\n    handleAction(p5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(Sketch, {\n      setup: setup,\n      draw: draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VisualizeData, {\n      data: state.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 508,\n    columnNumber: 5\n  }, this);\n}\n_c = Dashboard;\nfunction VisualizeData(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board__info\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Dashboard Infos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cordX\",\n      children: [\"X : \", props.data.expX, \" , \", props.data.expX]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cordY\",\n      children: [\"Y : \", props.data.sepX, \" , \", props.data.sepY]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 5\n  }, this);\n}\n_c2 = VisualizeData;\nconst FindYourPath = (X, p5) => {\n  let x = X.data.expX;\n  let y = X.data.expY;\n  let x2 = X.data.sepX;\n  let y2 = X.data.sepY;\n  p5.line(x + 10, y + 10, x2 + 10, y2 + 10);\n};\n_c3 = FindYourPath;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"VisualizeData\");\n$RefreshReg$(_c3, \"FindYourPath\");","map":{"version":3,"names":["React","Sketch","Node","constructor","_x","_y","_visited","_index","x","y","visited","f","g","h","index","setX","setY","setF","setf","Math","abs","setG","setH","setVisited","getX","getY","getF","getG","getH","getVisited","width","height","Xb","Yb","Xpointx","Xpointy","Ypointy","Ypointx","Dashboard","exp","sep","isFound","Board","Array","fill","Step","BoardNode","state","board","data","expX","expY","sepX","sepY","setup","p5","canvasParentRef","createCanvas","parent","stroke","frameRate","background","i","line","infoBoard","rect","text","key","mouseIsPressed","drawBoardElements","j","square","noFill","FindYourPath","setWalls","dx2","dy2","visualiziation","_queue","length","current","pop","Algo","unit","Nodes","_start","round","_end","Closed","Open","_current","push","alert","min","splice","console","table","Nq","tmp","tmp1","tmp2","tmp3","log","tmpNode","IndexO","DirH","widthIndexO","width_end","DirV","heightIndexO","height_end","tmpG","tmpH","Dis","handleAction","mouseX","mouseY","mouseButton","LEFT","curr","draw","VisualizeData","props","X","x2","y2"],"sources":["/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport './Dashboard.css';\n\nclass Node {\n  x: number;\n  y : number;\n  visited : boolean;\n  f : number;\n  g : number;\n  h : number;\n  index: number;\n  // _parent: Node;\n  \n  constructor(_x : number, _y : number, _visited : boolean, _index : number) {\n    this.x = _x;\n    this.y = _y;\n    this.visited = _visited;\n    this.index = _index;\n\n    this.f = 0;\n    this.g = 0;\n    this.h = 0;\n    // this._parent = new Node(0, 0, false, 0);\n;  }\n  setX(x : number) { this.x = x;  }\n  setY(y : number) { this.y = y;  }\n  setF(f : number) {  this.f = f; }\n  setf() {  this.f = Math.abs(this.g + this.h) }\n  setG(g : number) {  this.g = g; }\n  setH(h : number) {  this.h = h; }\n  setVisited(visited : boolean) {  this.visited = visited; }\n  // setParent(parent : Node) {  this._parent = parent; }\n\n  getX() { return this.x; }\n  getY() { return this.y; }\n  getF() { return this.f; }\n  getG() { return this.g; }\n  getH() { return this.h; }\n  getVisited() { return this.visited; }\n  // getParent() { return this._parent; }\n\n}\n\nconst   width = 1440;\nconst   height = 800;\nconst   Xb = width / 20;\nconst   Yb = height / 20;\n\n\nvar Xpointx = 0\nvar Xpointy = 0\n\nvar Ypointy = 0\nvar Ypointx = 0\n\nexport interface Props {\n  data: {\n    // name: string;\n    expX: number;\n    expY: number;\n    sepX: number;\n    sepY: number;\n  }\n}\n\nexport default function Dashboard()\n{\n  var     exp = false;\n  var     sep = false;\n  var     isFound = false;\n  let     Board =  new Array(Xb * Yb).fill(0);\n  var     Step = 0\n  let  BoardNode = new Array(Xb).fill(new Array(Yb).fill(new Node(0, 0, false, 0)));\n  \n  //BoardNode[0][0] = new Node(0, 0, false, 0);\n  \n// \n  // acces with Board[y * Xb + x]\n  var state = {\n    board:{\n      Xb: Xb,\n      Yb: Yb,\n      Board: Board\n    },\n    data :  {  \n      expX: 0,\n      expY: 0,\n      sepX: 0,\n      sepY: 0\n    }\n  }\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\n    p5.stroke(50); // Set line drawing color to white\n    p5.frameRate(10);\n\t\tp5.background('#222222')\n\n    for (let i = 0; i < 1400; i+=20) {\n      p5.line(i, 0, i, 1400);\n    }\n    for (let i = 0; i < 680; i+=20) {\n      p5.line(0, i, 1400, i);\n    }\n\n    state.board.Board = Board;\n    state.board.Xb = Xb;\n    state.board.Yb = Yb;\n  }\n  const infoBoard = (p5: p5Types) => {\n    p5.fill(\"white\");\n    if (exp || sep)\n      p5.rect(0, 0, 230, 200);\n    else \n      p5.rect(0, 0, 230, 150);\n    p5.fill(\"darkblue\");\n    p5.stroke(\"darkblue\");\n    p5.text(\"Xb : \" + Xb + \" , Yb :\" + Yb , 130,20);\n    p5.text(\"key pressed : [ \" + p5.key + \" ]\", 20,20);\n    p5.text(\"mouse presse : [\" + p5.mouseIsPressed + \"]\", 20,40);\n    p5.text(\"Press s : select first square\", 20,60);\n    p5.text(\"Press e : select second square\", 20,80);\n    p5.text(\"Press w : select wall square\", 20,100);\n    p5.text(\"Press p : Use Path Finder\", 20,120);\n    p5.text(\"Press r : Reset\", 20,140);\n    if (sep)\n    {\n      p5.text(\"Y : \" + state.data.sepY + \", \" + state.data.sepX, 20,170)\n    }\n    if (exp)\n    {\n      p5.text(\"X : \" + state.data.expY + \", \" + state.data.expX, 20,190)\n    }\n  }\n  const drawBoardElements = (p5: p5Types ) => {\n    for (let i = 0; i < Xb; i++) \n      for (let j = 0; j < Yb; j++) \n      {\n        // white 0; red 2; green 3; brown 4; yellow 8;  black;\n        if (Board[j * Xb + i] === 0){\n          p5.fill(\"white\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 2)\n        {\n          p5.fill(\"red\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" X \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 3)\n        {\n          p5.fill(\"green\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" Y \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 4)\n        {\n          p5.fill(\"brown\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 8)\n        {\n          p5.fill(\"orange\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else\n        {\n          p5.fill(\"black\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n      }\n    if (isFound)\n    {\n      p5.fill(\"black\");\n      FindYourPath(state, p5);\n    }\n    infoBoard(p5);\n  }\n//\n  const setWalls = (p5: p5Types) => {\n      // init default variables \n      // var x = 15 * 20 - 20;\n      // var y = 15 * 20 - 20;\n      // var dx2 = 71 * 20 - 20 ;\n      // var dy2 = 39 * 20 - 20;\n      var x = Xpointx;\n      var y = Xpointy;\n      var dx2 = Ypointx;\n      var dy2 = Ypointy;\n      p5.fill(\"orange\");\n      p5.square(x, y, 20);\n      p5.fill(\"grey\");\n      p5.square(dx2, dy2, 20);\n      // walls \n      for (var i = 0; i < 20; i++)\n        Board[(10 + i) * Xb + 29] = 4;\n  }\n  const visualiziation = (p5: p5Types, _queue : any) => {\n    // _queue is the path\n    var x = Xpointx;\n    var y = Xpointy;\n    var dx2 = Ypointx;\n    var dy2 = Ypointy;\n    // var x = 15 * 20 - 20;\n    // var y = 15 * 20 - 20;\n    // var dx2 = 71  * 20 - 20 ;\n    // var dy2 = 39  * 20 - 20;\n\n    // draw path\n    while (_queue.length > 0)\n    {\n      var current = _queue[_queue.length - 1].index\n      // p5.fill(\"orange\");\n      // p5.square((current % Xb) * unit, Math.floor(current / Xb) * unit, unit);\n      Board[current] = 8;\n      _queue.pop()\n    }\n    // drawing squars\n    p5.fill(\"green\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n  }\n//\n  const Algo = (p5 : p5Types) => {\n    \n    // white 0; red 2; green 3; brown 4; yellow 8;  black;\n    // init default variables\n      setWalls(p5)\n      var x = Xpointx;\n      var y = Xpointy;\n      var dx2 = Ypointx;\n      var dy2 = Ypointy;\n      // var x = 15 * 20 - 20;\n      // var y = 15 * 20 - 20;\n      // var dx2 = 71 * 20 - 20 ;\n      // var dy2 = 39 * 20 - 20;\n      //\n      const unit = 20;\n      // \n      var Nodes = new Array(Xb * Yb).fill(Node)\n      var _queue = new Array()\n      var _start = Math.round(y / unit) * Xb + Math.round(x / unit)\n      var _end  = Math.round(dy2 / unit) * Xb + Math.round(dx2 / unit)\n      \n      // BFS \n      var Closed = new Array()\n      var Open = new Array()\n      var _visited = new Array(Xb * Yb).fill(false)\n      var _current = _start\n      \n    // set queue\n      while (_queue.length > 0) _queue.pop()\n      while (Closed.length > 0) Closed.pop()\n \n    // step 1\n      while (Open.length > 0) Open.pop()\n      Nodes[_start]  = new Node(y,x,true, _start)\n      Nodes[_start].g = 1\n      Nodes[_start].h = _end - _start\n      Nodes[_start].f = Nodes[_start].g + Nodes[_start].h\n      Open.push(Nodes[_start ])\n      _queue.push(Nodes[_start])\n\n      while (Open.length > 0 && !isFound)\n      {\n        // 1000\n        if (Step >= 1000 && false)\n        {\n          isFound = true\n          break\n        }\n        // console.log(\"Step : \" , Step)\n        // console.log(\"Actual Open : \", Open.length ,\"\\n\")\n        // console.table (Open)\n\n      // step 2\n        if (Open.length <= 0 ) alert(\"Open is Empty\")\n      // step 3\n        var min     = Open[0].f , index = 0\n        for (let i = 0; i < Open.length; i++)\n        {\n          if (Open[i].f < min)\n          {\n            min = Open[i].f\n            index = i\n          }\n        }\n        // remove the smallest element from the open list to the closed list\n        _current = Open[index].index\n        Closed.push(Open[index])\n        // console.log(\"index removed: \" , index , \"\\n\")\n        Open.splice(index, 1)\n        // console.log(\"min: \" , min , \"\\ncurrent: \" , _current, \" \")\n        // console.log(\"After Open: \", Open.length ,\"\\n\" )\n        console.table(Open)\n        // if node is goal then alert found \n        if (_current === _end)\n        {\n          // alert(\"Found 1\")\n          isFound = true\n          break\n        }\n      // step 4\n        // find the neighbors of the current node\n        var  Nq = new Array()\n        let  tmp = new Node(_current - Xb,_current - Xb,false,_current - Xb)\n        let  tmp1 = new Node(_current + 1,_current + 1,false, _current + 1)\n        let  tmp2 = new Node(_current +  Xb,_current + 1,false, _current + Xb)\n        let  tmp3 = new Node(_current - 1,_current - 1,false, _current - 1)\n\n        if (!(_current % Xb === 0))\n          Nq.push(tmp3)\n\n        if (!((_current % Xb === 0) && ((_current - 1) % Xb === 0)))\n          Nq.push(tmp1)\n\n        if (_current > Xb - 1 && _current - Xb > 0) \n          Nq.push(tmp)\n       \n        if (_current < Yb * (Xb - 1))\n          Nq.push(tmp2)\n\n        console.log(\"Nq: \" , Nq.length)\n        // step 5\n        for (let i = 0; i < Nq.length; i++)\n        {\n          if (Nq[i].index === _end)\n          {\n            // alert(\"END FOUND\")\n            isFound = true\n            break\n          }\n          if (Nq[i].index >= 0 && Nq[i].index < Xb * Yb && Board[Nq[i].index] !== 4 &&  _visited[Nq[i].index] === false)\n          {\n            var tmpNode = new Node(Nq[i].y, Nq[i].x, true, Nq[i].index)\n\n            const IndexO = Nq[i].index\n            // var DirH = widthIndexO - width_start \n            var DirH = Math.abs(widthIndexO - width_end) * 1\n            var DirV = Math.abs(heightIndexO - height_end) * 1\n\n            tmpG += DirH + DirV\n\n            var tmpG = Math.abs(IndexO - _start) * 1\n            var tmpH = Math.abs(_end - IndexO) * 1\n            \n            var Dis = _end - IndexO\n            \n            if (Dis)\n            {\n              if ((IndexO % Xb) < (_start % Xb))\n                continue\n            }\n            else\n            {\n              if ((IndexO % Xb) > (_start % Xb))\n                continue\n            } \n\n            \n            \n            \n\n            console.log( \" Nq[i].index : \" ,Nq[i].index,\"tmpG: \" , tmpG , \"tmpH: \" , tmpH)\n\n            tmpNode.setG(tmpG)\n            tmpNode.setH(tmpH)\n            tmpNode.setf()\n\n            Open.push(tmpNode)\n          }\n          _visited[Nq[i].index] = true\n        }\n        Step++\n        // console.table(\"Closed\", Closed)\n        console.table(\"---------------------\")\n      }\n     \n      // step 6\n      for (let i = 0; i < Closed.length; i++)\n        _queue.push(Closed[i])\n      visualiziation(p5, _queue)\n  }\n  \n\n  const handleAction = (p5: p5Types) => {\n    if (p5.key === 's' && exp === false)\n    {\n      p5.fill(\"red\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20)\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 2;\n        exp = true;\n        state.data.expX = x;\n        state.data.expY = y;\n        p5.text(\"X : \" + x + \", \" + y, 20,170);\n\n        Xpointx = x\n        Xpointy = y\n      }\n    }\n    if (p5.key === 'e' && sep === false)\n    {\n\n      p5.fill(\"green\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      \n      \n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 3;\n        sep = true;\n        state.data.sepX = x;\n        state.data.sepY = y;\n        p5.text(\"Y : \" + x + \", \" + y, 20,190);\n\n        Ypointx = x\n        Ypointy = y\n        // setstate({\n        //   data :  {  \n        //     expX: x,\n        //     expY: y,\n        //     sepX: state.data.sepX,\n        //     sepY: state.data.sepY,\n        //   }})\n      }\n    }\n    if (p5.key === 'w')\n    {\n      p5.fill(\"brown\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n\n        // if (Board[Math.round(y / 20) * Xb + Math.round(x / 20)] == 4)\n        //   Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 0;\n        // else\n          Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 4;\n\n          sep = true;\n      }\n   \n    }\n    if (p5.key === 'r')\n    {\n      exp = false;\n      sep = false;\n      isFound = false;\n\n      for (let i = 0; i < Xb; i++) \n      {\n        for (let j = 0; j < Yb; j++) \n          if (Board[j * Xb + i] === 2 || Board[j * Xb + i] === 3 || Board[j * Xb + i] === 4)\n            Board[j * Xb + i] = 0;\n      }\n      let curr = 0\n      while (curr < Board.length)\n      {\n        if (Board[curr] === 8)\n          Board[curr] = 0;\n          curr++\n      }\n\n    }\n    if (p5.key === 'p' && exp === true && sep === true && isFound === false)\n    {\n      FindYourPath(state, p5);\n      isFound = true;\n    }\n    if (p5.key === 'ñ' || p5.key === ';')\n    {\n      Algo(p5)\n    }\n  }\n\n  const draw = (p5: p5Types) => {\n    drawBoardElements(p5)\n    handleAction(p5)\n\t}\n  return(\n    <div className='board'>\n      <Sketch setup={setup} draw={draw} />\n      <VisualizeData data={state.data}/>\n      {/* <div className='cordX'>X : {state.data.expX} , {state.data.expX}</div>\n      <div className='cordY'>Y : {state.data.sepX} , {state.data.sepY}</div> */}\n    </div>\n  )\n}\n\nfunction VisualizeData(props: Props)\n{\n  return (\n    <div className='board__info'>\n        <div>Dashboard Infos</div>\n        <div className='cordX'>X : {props.data.expX} , {props.data.expX}</div>\n        <div className='cordY'>Y : {props.data.sepX} , {props.data.sepY}</div>\n      </div>);\n}\nconst FindYourPath = (X : Props, p5: p5Types) => {\n\n  let x = X.data.expX;\n  let y = X.data.expY;\n  let x2 = X.data.sepX;\n  let y2 = X.data.sepY;\n\n  p5.line(x + 10, y + 10, x2 + 10, y2 + 10);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}