{"ast":null,"code":"var _jsxFileName = \"/Users/eelaazmi/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx\";\nimport React from 'react';\nimport Sketch from \"react-p5\";\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Node {\n  // _parent: Node;\n\n  constructor(_x, _y, _visited, _index) {\n    this.x = void 0;\n    this.y = void 0;\n    this.visited = void 0;\n    this.f = void 0;\n    this.g = void 0;\n    this.h = void 0;\n    this.index = void 0;\n    this.x = _x;\n    this.y = _y;\n    this.visited = _visited;\n    this.index = _index;\n    this.f = 0;\n    this.g = 0;\n    this.h = 0;\n    // this._parent = new Node(0, 0, false, 0);\n    ;\n  }\n  setX(x) {\n    this.x = x;\n  }\n  setY(y) {\n    this.y = y;\n  }\n  setF(f) {\n    this.f = f;\n  }\n  setf() {\n    this.f = this.g + this.h;\n  }\n  setG(g) {\n    this.g = g;\n  }\n  setH(h) {\n    this.h = h;\n  }\n  setVisited(visited) {\n    this.visited = visited;\n  }\n  // setParent(parent : Node) {  this._parent = parent; }\n\n  getX() {\n    return this.x;\n  }\n  getY() {\n    return this.y;\n  }\n  getF() {\n    return this.f;\n  }\n  getG() {\n    return this.g;\n  }\n  getH() {\n    return this.h;\n  }\n  getVisited() {\n    return this.visited;\n  }\n  // getParent() { return this._parent; }\n}\n\nconst width = 1440;\nconst height = 800;\nconst Xb = width / 20;\nconst Yb = height / 20;\nexport default function Dashboard() {\n  var exp = false;\n  var sep = false;\n  var isFound = false;\n  let Board = new Array(Xb * Yb).fill(0);\n\n  // \n  // acces with Board[y * Xb + x]\n  var state = {\n    board: {\n      Xb: Xb,\n      Yb: Yb,\n      Board: Board\n    },\n    data: {\n      expX: 0,\n      expY: 0,\n      sepX: 0,\n      sepY: 0\n    }\n  };\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(width, height).parent(canvasParentRef);\n    p5.stroke(50); // Set line drawing color to white\n    p5.frameRate(1000);\n    p5.background('#222222');\n    for (let i = 0; i < 1400; i += 20) {\n      p5.line(i, 0, i, 1400);\n    }\n    for (let i = 0; i < 680; i += 20) {\n      p5.line(0, i, 1400, i);\n    }\n    state.board.Board = Board;\n    state.board.Xb = Xb;\n    state.board.Yb = Yb;\n  };\n  const infoBoard = p5 => {\n    p5.fill(\"white\");\n    if (exp || sep) p5.rect(0, 0, 230, 200);else p5.rect(0, 0, 230, 150);\n    p5.fill(\"darkblue\");\n    p5.stroke(\"darkblue\");\n    p5.text(\"Xb : \" + Xb + \" , Yb :\" + Yb, 130, 20);\n    p5.text(\"key pressed : [ \" + p5.key + \" ]\", 20, 20);\n    p5.text(\"mouse presse : [\" + p5.mouseIsPressed + \"]\", 20, 40);\n    p5.text(\"Press s : select first square\", 20, 60);\n    p5.text(\"Press e : select second square\", 20, 80);\n    p5.text(\"Press w : select wall square\", 20, 100);\n    p5.text(\"Press p : Use Path Finder\", 20, 120);\n    p5.text(\"Press r : Reset\", 20, 140);\n    if (sep) {\n      p5.text(\"Y : \" + state.data.sepY + \", \" + state.data.sepX, 20, 170);\n    }\n    if (exp) {\n      p5.text(\"X : \" + state.data.expY + \", \" + state.data.expX, 20, 190);\n    }\n  };\n  const drawBoardElements = p5 => {\n    for (let i = 0; i < Xb; i++) for (let j = 0; j < Yb; j++) {\n      // white 0; red 2; green 3; brown 4; yellow 8;  black;\n      if (Board[j * Xb + i] === 0) {\n        p5.fill(\"white\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 2) {\n        p5.fill(\"red\");\n        p5.square(i * 20, j * 20, 20);\n        p5.text(\" X \", i * 20 + 3, j * 20 + 16);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 3) {\n        p5.fill(\"green\");\n        p5.square(i * 20, j * 20, 20);\n        p5.text(\" Y \", i * 20 + 3, j * 20 + 16);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 4) {\n        p5.fill(\"brown\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else if (Board[j * Xb + i] === 8) {\n        p5.fill(\"orange\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      } else {\n        p5.fill(\"black\");\n        p5.square(i * 20, j * 20, 20);\n        p5.noFill();\n      }\n    }\n    if (isFound) {\n      p5.fill(\"black\");\n      FindYourPath(state, p5);\n    }\n    infoBoard(p5);\n  };\n  //\n  const setWalls = p5 => {\n    // init default variables \n    var x = 13 * 20 - 20;\n    var y = 10 * 20 - 20;\n    var dx2 = 71 * 20 - 20;\n    var dy2 = 39 * 20 - 20;\n    p5.fill(\"orange\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n    // walls \n    for (var i = 0; i < 20; i++) Board[(10 + i) * Xb + 29] = 4;\n  };\n  const visualiziation = (p5, _queue) => {\n    // _queue is the path\n    var x = 13 * 20 - 20;\n    var y = 10 * 20 - 20;\n    var dx2 = 71 * 20 - 20;\n    var dy2 = 39 * 20 - 20;\n\n    // draw path\n    while (_queue.length > 0) {\n      var current = _queue[_queue.length - 1].index;\n      // p5.fill(\"orange\");\n      // p5.square((current % Xb) * unit, Math.floor(current / Xb) * unit, unit);\n      Board[current] = 8;\n      _queue.pop();\n    }\n    // drawing squars\n    p5.fill(\"green\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n  };\n  //\n  const Algo = p5 => {\n    // white 0; red 2; green 3; brown 4; yellow 8;  black;\n    // init default variables\n    setWalls(p5);\n    var x = 13 * 20 - 20;\n    var y = 10 * 20 - 20;\n    var dx2 = 71 * 20 - 20;\n    var dy2 = 39 * 20 - 20;\n    //\n    const unit = 20;\n    // \n    var Nodes = new Array(Xb * Yb).fill(Node);\n    var _queue = new Array();\n    var _start = Math.round(y / unit) * Xb + Math.round(x / unit);\n    var _end = Math.round(dy2 / unit) * Xb + Math.round(dx2 / unit);\n\n    // BFS \n    var Closed = new Array();\n    var Open = new Array();\n    var _visited = new Array(Xb * Yb).fill(false);\n    var _current = _start;\n\n    // set queue\n    while (_queue.length > 0) _queue.pop();\n    while (Closed.length > 0) Closed.pop();\n\n    // step 1\n    while (Open.length > 0) Open.pop();\n    Nodes[_start] = new Node(y, x, true, _start);\n    Open.push(Nodes[_start]);\n    _queue.push(Nodes[_start]);\n    var Step = 0;\n    while (Open.length > 0) {\n      if (Step >= 303) break;\n\n      // step 2\n      if (Open.length <= 0) {\n        alert(\"Open is Empty\");\n        break;\n      }\n      // step 3\n      // find the smallest element in the open list\n      var min = Open[0].f;\n      var index = 0;\n      for (let i = 0; i < Open.length; i++) {\n        if (Open[i].f < min) {\n          min = Open[i].f;\n          index = i;\n        }\n      }\n      _current = Open[index].index;\n      // Open.splice(index, 1)\n      Closed.push(Open[index]);\n      // remove the smallest element from the open list to the closed list\n\n      for (let i = 0; i < Open.length; i++) {\n        Open.splice(i, 1);\n      }\n\n      // if node is goal then alert found \n\n      if (_current === _end) {\n        alert(\"Found\");\n        isFound = true;\n        break;\n      }\n      // step 4\n      // find the neighbors of the current node\n      var Nq = new Array();\n      let tmp = new Node(0, 0, false, _current - Xb);\n      let tmp1 = new Node(0, 0, false, _current + 1);\n      let tmp2 = new Node(0, 0, false, _current + Xb);\n      let tmp3 = new Node(0, 0, false, _current - 1);\n      Nq.push(tmp);\n      Nq.push(tmp1);\n      Nq.push(tmp2);\n      Nq.push(tmp3);\n\n      // step 5\n      for (let i = 0; i < Nq.length; i++) {\n        if (Board[Nq[i].index] === _end) alert(\"END FOUND\");\n        if (Nq[i].index >= 0 && Nq[i].index < Xb * Yb && Board[Nq[i].index] !== 4 && _visited[Nq[i].index] === false) {\n          var tmpNode = new Node(Nq[i].y, Nq[i].x, true, Nq[i].index);\n          tmpNode.setG(Math.abs(_start - Nq[i].index));\n          tmpNode.setH(Math.abs(_end - Nq[i].index));\n          tmpNode.setf();\n          // tmpNode.setParent( Nq[i].index)\n          Open.push(tmpNode);\n        }\n      }\n      // break\n      console.log(\"Step \", Step++);\n    }\n    // step 6\n    for (let i = 0; i < Closed.length; i++) _queue.push(Closed[i]);\n    visualiziation(p5, _queue);\n  };\n  const handleAction = p5 => {\n    if (p5.key === 's' && exp === false) {\n      p5.fill(\"red\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 2;\n        exp = true;\n        state.data.expX = x;\n        state.data.expY = y;\n        p5.text(\"X : \" + x + \", \" + y, 20, 170);\n\n        // setstate({\n        //   data :  { \n        //     expX: state.data.expX,\n        //     expY: state.data.expY,\n        //     sepX: x,\n        //     sepY: y,\n        //   }})\n      }\n    }\n\n    if (p5.key === 'e' && sep === false) {\n      p5.fill(\"green\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 3;\n        sep = true;\n        state.data.sepX = x;\n        state.data.sepY = y;\n        p5.text(\"Y : \" + x + \", \" + y, 20, 190);\n\n        // setstate({\n        //   data :  {  \n        //     expX: x,\n        //     expY: y,\n        //     sepX: state.data.sepX,\n        //     sepY: state.data.sepY,\n        //   }})\n      }\n    }\n\n    if (p5.key === 'w') {\n      p5.fill(\"brown\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \", x, y);\n      p5.square(x, y, 20);\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT) {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n\n        // if (Board[Math.round(y / 20) * Xb + Math.round(x / 20)] == 4)\n        //   Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 0;\n        // else\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 4;\n        sep = true;\n      }\n    }\n    if (p5.key === 'r') {\n      exp = false;\n      sep = false;\n      isFound = false;\n      for (let i = 0; i < Xb; i++) {\n        for (let j = 0; j < Yb; j++) if (Board[j * Xb + i] === 2 || Board[j * Xb + i] === 3 || Board[j * Xb + i] === 4) Board[j * Xb + i] = 0;\n      }\n      let curr = 0;\n      while (curr < Board.length) {\n        if (Board[curr] === 8) Board[curr] = 0;\n        curr++;\n      }\n    }\n    if (p5.key === 'p' && exp === true && sep === true && isFound === false) {\n      FindYourPath(state, p5);\n      isFound = true;\n    }\n    if (p5.key === 'ñ' || p5.key === ';') {\n      Algo(p5);\n    }\n  };\n  const draw = p5 => {\n    drawBoardElements(p5);\n    handleAction(p5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(Sketch, {\n      setup: setup,\n      draw: draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VisualizeData, {\n      data: state.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 5\n  }, this);\n}\n_c = Dashboard;\nfunction VisualizeData(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board__info\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Dashboard Infos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cordX\",\n      children: [\"X : \", props.data.expX, \" , \", props.data.expX]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cordY\",\n      children: [\"Y : \", props.data.sepX, \" , \", props.data.sepY]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n}\n_c2 = VisualizeData;\nconst FindYourPath = (X, p5) => {\n  let x = X.data.expX;\n  let y = X.data.expY;\n  let x2 = X.data.sepX;\n  let y2 = X.data.sepY;\n  p5.line(x + 10, y + 10, x2 + 10, y2 + 10);\n};\n_c3 = FindYourPath;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"VisualizeData\");\n$RefreshReg$(_c3, \"FindYourPath\");","map":{"version":3,"names":["React","Sketch","Node","constructor","_x","_y","_visited","_index","x","y","visited","f","g","h","index","setX","setY","setF","setf","setG","setH","setVisited","getX","getY","getF","getG","getH","getVisited","width","height","Xb","Yb","Dashboard","exp","sep","isFound","Board","Array","fill","state","board","data","expX","expY","sepX","sepY","setup","p5","canvasParentRef","createCanvas","parent","stroke","frameRate","background","i","line","infoBoard","rect","text","key","mouseIsPressed","drawBoardElements","j","square","noFill","FindYourPath","setWalls","dx2","dy2","visualiziation","_queue","length","current","pop","Algo","unit","Nodes","_start","Math","round","_end","Closed","Open","_current","push","Step","alert","min","splice","Nq","tmp","tmp1","tmp2","tmp3","tmpNode","abs","console","log","handleAction","mouseX","mouseY","mouseButton","LEFT","curr","draw","VisualizeData","props","X","x2","y2"],"sources":["/Users/eelaazmi/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport './Dashboard.css';\n\nclass Node {\n  x: number;\n  y : number;\n  visited : boolean;\n  f : number;\n  g : number;\n  h : number;\n  index: number;\n  // _parent: Node;\n  \n  constructor(_x : number, _y : number, _visited : boolean, _index : number) {\n    this.x = _x;\n    this.y = _y;\n    this.visited = _visited;\n    this.index = _index;\n\n    this.f = 0;\n    this.g = 0;\n    this.h = 0;\n    // this._parent = new Node(0, 0, false, 0);\n;  }\n  setX(x : number) { this.x = x;  }\n  setY(y : number) { this.y = y;  }\n  setF(f : number) {  this.f = f; }\n  setf() {  this.f = this.g + this.h; }\n  setG(g : number) {  this.g = g; }\n  setH(h : number) {  this.h = h; }\n  setVisited(visited : boolean) {  this.visited = visited; }\n  // setParent(parent : Node) {  this._parent = parent; }\n\n  getX() { return this.x; }\n  getY() { return this.y; }\n  getF() { return this.f; }\n  getG() { return this.g; }\n  getH() { return this.h; }\n  getVisited() { return this.visited; }\n  // getParent() { return this._parent; }\n\n}\n\nconst   width = 1440;\nconst   height = 800;\nconst   Xb = width / 20;\nconst   Yb = height / 20;\n\nexport interface Props {\n  data: {\n    // name: string;\n    expX: number;\n    expY: number;\n    sepX: number;\n    sepY: number;\n  }\n}\n\nexport default function Dashboard()\n{\n  var     exp = false;\n  var     sep = false;\n  var     isFound = false;\n  let     Board =  new Array(Xb * Yb).fill(0);\n\n// \n  // acces with Board[y * Xb + x]\n  var state = {\n    board:{\n      Xb: Xb,\n      Yb: Yb,\n      Board: Board\n    },\n    data :  {  \n      expX: 0,\n      expY: 0,\n      sepX: 0,\n      sepY: 0\n    }\n  }\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\n    p5.stroke(50); // Set line drawing color to white\n    p5.frameRate(1000);\n\t\tp5.background('#222222')\n\n    for (let i = 0; i < 1400; i+=20) {\n      p5.line(i, 0, i, 1400);\n    }\n    for (let i = 0; i < 680; i+=20) {\n      p5.line(0, i, 1400, i);\n    }\n\n    state.board.Board = Board;\n    state.board.Xb = Xb;\n    state.board.Yb = Yb;\n  }\n  const infoBoard = (p5: p5Types) => {\n    p5.fill(\"white\");\n    if (exp || sep)\n      p5.rect(0, 0, 230, 200);\n    else \n      p5.rect(0, 0, 230, 150);\n    p5.fill(\"darkblue\");\n    p5.stroke(\"darkblue\");\n    p5.text(\"Xb : \" + Xb + \" , Yb :\" + Yb , 130,20);\n    p5.text(\"key pressed : [ \" + p5.key + \" ]\", 20,20);\n    p5.text(\"mouse presse : [\" + p5.mouseIsPressed + \"]\", 20,40);\n    p5.text(\"Press s : select first square\", 20,60);\n    p5.text(\"Press e : select second square\", 20,80);\n    p5.text(\"Press w : select wall square\", 20,100);\n    p5.text(\"Press p : Use Path Finder\", 20,120);\n    p5.text(\"Press r : Reset\", 20,140);\n    if (sep)\n    {\n      p5.text(\"Y : \" + state.data.sepY + \", \" + state.data.sepX, 20,170)\n    }\n    if (exp)\n    {\n      p5.text(\"X : \" + state.data.expY + \", \" + state.data.expX, 20,190)\n    }\n  }\n  const drawBoardElements = (p5: p5Types ) => {\n    for (let i = 0; i < Xb; i++) \n      for (let j = 0; j < Yb; j++) \n      {\n        // white 0; red 2; green 3; brown 4; yellow 8;  black;\n        if (Board[j * Xb + i] === 0){\n          p5.fill(\"white\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 2)\n        {\n          p5.fill(\"red\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" X \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 3)\n        {\n          p5.fill(\"green\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" Y \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 4)\n        {\n          p5.fill(\"brown\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 8)\n        {\n          p5.fill(\"orange\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else\n        {\n          p5.fill(\"black\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n      }\n    if (isFound)\n    {\n      p5.fill(\"black\");\n      FindYourPath(state, p5);\n    }\n    infoBoard(p5);\n  }\n//\n  const setWalls = (p5: p5Types) => {\n      // init default variables \n      var x = 13 * 20 - 20;\n      var y = 10 * 20 - 20;\n      var dx2 = 71 * 20 - 20 ;\n      var dy2 = 39 * 20 - 20;\n      p5.fill(\"orange\");\n      p5.square(x, y, 20);\n      p5.fill(\"grey\");\n      p5.square(dx2, dy2, 20);\n      // walls \n      for (var i = 0; i < 20; i++)\n        Board[(10 + i) * Xb + 29] = 4;\n  }\n  const visualiziation = (p5: p5Types, _queue : any) => {\n    // _queue is the path\n    var x = 13 * 20 - 20;\n    var y = 10 * 20 - 20;\n    var dx2 = 71 * 20 - 20 ;\n    var dy2 = 39 * 20 - 20;\n\n    // draw path\n    while (_queue.length > 0)\n    {\n      var current = _queue[_queue.length - 1].index\n      // p5.fill(\"orange\");\n      // p5.square((current % Xb) * unit, Math.floor(current / Xb) * unit, unit);\n      Board[current] = 8;\n      _queue.pop()\n    }\n    // drawing squars\n    p5.fill(\"green\");\n    p5.square(x, y, 20);\n    p5.fill(\"grey\");\n    p5.square(dx2, dy2, 20);\n  }\n//\n  const Algo = (p5 : p5Types) => {\n    \n    // white 0; red 2; green 3; brown 4; yellow 8;  black;\n    // init default variables\n      setWalls(p5)\n      var x = 13 * 20 - 20;\n      var y = 10 * 20 - 20;\n      var dx2 = 71 * 20 - 20 ;\n      var dy2 = 39 * 20 - 20;\n      //\n      const unit = 20;\n      // \n      var Nodes = new Array(Xb * Yb).fill(Node)\n      var _queue = new Array()\n      var _start = Math.round(y / unit) * Xb + Math.round(x / unit)\n      var _end  = Math.round(dy2 / unit) * Xb + Math.round(dx2 / unit)\n      \n      // BFS \n      var Closed = new Array()\n      var Open = new Array()\n      var _visited = new Array(Xb * Yb).fill(false)\n      var _current = _start\n      \n    // set queue\n      while (_queue.length > 0) _queue.pop()\n      while (Closed.length > 0) Closed.pop()\n \n    // step 1\n      while (Open.length > 0) Open.pop()\n      Nodes[_start]  = new Node(y,x,true, _start)\n      Open.push(Nodes[_start])\n      _queue.push(Nodes[_start])\n\n      var Step = 0\n      while (Open.length > 0)\n      {\n        if (Step >= 303)\n          break\n\n      // step 2\n        if (Open.length <= 0 )\n        {\n          alert(\"Open is Empty\")\n          break\n        }\n      // step 3\n        // find the smallest element in the open list\n        var min = Open[0].f\n        var index = 0\n        for (let i = 0; i < Open.length; i++)\n        {\n          if (Open[i].f < min)\n          {\n            min = Open[i].f\n            index = i\n          }\n        }\n        _current = Open[index].index\n        // Open.splice(index, 1)\n        Closed.push(Open[index])\n        // remove the smallest element from the open list to the closed list\n        \n        for (let i = 0; i < Open.length; i++)\n        {\n            Open.splice(i, 1)\n        }\n        \n        // if node is goal then alert found \n\n        if (_current === _end)\n        {\n          alert(\"Found\")\n          isFound = true\n          break\n        }\n      // step 4\n        // find the neighbors of the current node\n        var Nq = new Array()\n        let tmp = new Node(0,0,false,_current - Xb)\n        let tmp1 = new Node(0,0,false, _current + 1)\n        let tmp2 = new Node(0,0,false, _current + Xb)\n        let tmp3 = new Node(0,0,false, _current - 1)\n        Nq.push(tmp)\n        Nq.push(tmp1)\n        Nq.push(tmp2)\n        Nq.push(tmp3)\n \n        \n        // step 5\n        for (let i = 0; i < Nq.length; i++)\n        {\n          if (Board[Nq[i].index] === _end)\n            alert(\"END FOUND\")\n          \n          if (Nq[i].index >= 0 && Nq[i].index < Xb * Yb && Board[Nq[i].index] !== 4 &&  _visited[Nq[i].index] === false)\n          {\n            var tmpNode = new Node(Nq[i].y, Nq[i].x, true, Nq[i].index)\n            tmpNode.setG(Math.abs(_start -  Nq[i].index))\n            tmpNode.setH(Math.abs(_end   -  Nq[i].index))\n            tmpNode.setf()\n            // tmpNode.setParent( Nq[i].index)\n            Open.push(tmpNode)\n          }\n        }\n        // break\n        console.log(\"Step \", Step++ )\n      }\n      // step 6\n      for (let i = 0; i < Closed.length; i++)\n        _queue.push(Closed[i])\n      visualiziation(p5, _queue)\n  }\n  \n\n  const handleAction = (p5: p5Types) => {\n    if (p5.key === 's' && exp === false)\n    {\n      p5.fill(\"red\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20)\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 2;\n        exp = true;\n        state.data.expX = x;\n        state.data.expY = y;\n        p5.text(\"X : \" + x + \", \" + y, 20,170);\n\n        // setstate({\n        //   data :  { \n        //     expX: state.data.expX,\n        //     expY: state.data.expY,\n        //     sepX: x,\n        //     sepY: y,\n        //   }})\n      }\n    }\n    if (p5.key === 'e' && sep === false)\n    {\n\n      p5.fill(\"green\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 3;\n        sep = true;\n        state.data.sepX = x;\n        state.data.sepY = y;\n        p5.text(\"Y : \" + x + \", \" + y, 20,190);\n\n        // setstate({\n        //   data :  {  \n        //     expX: x,\n        //     expY: y,\n        //     sepX: state.data.sepX,\n        //     sepY: state.data.sepY,\n        //   }})\n      }\n    }\n    if (p5.key === 'w')\n    {\n      p5.fill(\"brown\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n\n        // if (Board[Math.round(y / 20) * Xb + Math.round(x / 20)] == 4)\n        //   Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 0;\n        // else\n          Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 4;\n\n          sep = true;\n      }\n   \n    }\n    if (p5.key === 'r')\n    {\n      exp = false;\n      sep = false;\n      isFound = false;\n\n      for (let i = 0; i < Xb; i++) \n      {\n        for (let j = 0; j < Yb; j++) \n          if (Board[j * Xb + i] === 2 || Board[j * Xb + i] === 3 || Board[j * Xb + i] === 4)\n            Board[j * Xb + i] = 0;\n      }\n      let curr = 0\n      while (curr < Board.length)\n      {\n        if (Board[curr] === 8)\n          Board[curr] = 0;\n          curr++\n      }\n\n    }\n    if (p5.key === 'p' && exp === true && sep === true && isFound === false)\n    {\n      FindYourPath(state, p5);\n      isFound = true;\n    }\n    if (p5.key === 'ñ' || p5.key === ';')\n    {\n      Algo(p5)\n    }\n  }\n\n  const draw = (p5: p5Types) => {\n    drawBoardElements(p5)\n    handleAction(p5)\n\t}\n  return(\n    <div className='board'>\n      <Sketch setup={setup} draw={draw} />\n      <VisualizeData data={state.data}/>\n      {/* <div className='cordX'>X : {state.data.expX} , {state.data.expX}</div>\n      <div className='cordY'>Y : {state.data.sepX} , {state.data.sepY}</div> */}\n    </div>\n  )\n}\n\nfunction VisualizeData(props: Props)\n{\n  return (\n    <div className='board__info'>\n        <div>Dashboard Infos</div>\n        <div className='cordX'>X : {props.data.expX} , {props.data.expX}</div>\n        <div className='cordY'>Y : {props.data.sepX} , {props.data.sepY}</div>\n      </div>);\n}\nconst FindYourPath = (X : Props, p5: p5Types) => {\n\n  let x = X.data.expX;\n  let y = X.data.expY;\n  let x2 = X.data.sepX;\n  let y2 = X.data.sepY;\n\n  p5.line(x + 10, y + 10, x2 + 10, y2 + 10);\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAkB,OAAO;AACrC,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAO,iBAAiB;AAAC;AAEzB,MAAMC,IAAI,CAAC;EAQT;;EAEAC,WAAW,CAACC,EAAW,EAAEC,EAAW,EAAEC,QAAkB,EAAEC,MAAe,EAAE;IAAA,KAT3EC,CAAC;IAAA,KACDC,CAAC;IAAA,KACDC,OAAO;IAAA,KACPC,CAAC;IAAA,KACDC,CAAC;IAAA,KACDC,CAAC;IAAA,KACDC,KAAK;IAIH,IAAI,CAACN,CAAC,GAAGJ,EAAE;IACX,IAAI,CAACK,CAAC,GAAGJ,EAAE;IACX,IAAI,CAACK,OAAO,GAAGJ,QAAQ;IACvB,IAAI,CAACQ,KAAK,GAAGP,MAAM;IAEnB,IAAI,CAACI,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,CAAC,GAAG,CAAC;IACV;IACJ;EAAG;EACDE,IAAI,CAACP,CAAU,EAAE;IAAE,IAAI,CAACA,CAAC,GAAGA,CAAC;EAAG;EAChCQ,IAAI,CAACP,CAAU,EAAE;IAAE,IAAI,CAACA,CAAC,GAAGA,CAAC;EAAG;EAChCQ,IAAI,CAACN,CAAU,EAAE;IAAG,IAAI,CAACA,CAAC,GAAGA,CAAC;EAAE;EAChCO,IAAI,GAAG;IAAG,IAAI,CAACP,CAAC,GAAG,IAAI,CAACC,CAAC,GAAG,IAAI,CAACC,CAAC;EAAE;EACpCM,IAAI,CAACP,CAAU,EAAE;IAAG,IAAI,CAACA,CAAC,GAAGA,CAAC;EAAE;EAChCQ,IAAI,CAACP,CAAU,EAAE;IAAG,IAAI,CAACA,CAAC,GAAGA,CAAC;EAAE;EAChCQ,UAAU,CAACX,OAAiB,EAAE;IAAG,IAAI,CAACA,OAAO,GAAGA,OAAO;EAAE;EACzD;;EAEAY,IAAI,GAAG;IAAE,OAAO,IAAI,CAACd,CAAC;EAAE;EACxBe,IAAI,GAAG;IAAE,OAAO,IAAI,CAACd,CAAC;EAAE;EACxBe,IAAI,GAAG;IAAE,OAAO,IAAI,CAACb,CAAC;EAAE;EACxBc,IAAI,GAAG;IAAE,OAAO,IAAI,CAACb,CAAC;EAAE;EACxBc,IAAI,GAAG;IAAE,OAAO,IAAI,CAACb,CAAC;EAAE;EACxBc,UAAU,GAAG;IAAE,OAAO,IAAI,CAACjB,OAAO;EAAE;EACpC;AAEF;;AAEA,MAAQkB,KAAK,GAAG,IAAI;AACpB,MAAQC,MAAM,GAAG,GAAG;AACpB,MAAQC,EAAE,GAAGF,KAAK,GAAG,EAAE;AACvB,MAAQG,EAAE,GAAGF,MAAM,GAAG,EAAE;AAYxB,eAAe,SAASG,SAAS,GACjC;EACE,IAAQC,GAAG,GAAG,KAAK;EACnB,IAAQC,GAAG,GAAG,KAAK;EACnB,IAAQC,OAAO,GAAG,KAAK;EACvB,IAAQC,KAAK,GAAI,IAAIC,KAAK,CAACP,EAAE,GAAGC,EAAE,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC;;EAE7C;EACE;EACA,IAAIC,KAAK,GAAG;IACVC,KAAK,EAAC;MACJV,EAAE,EAAEA,EAAE;MACNC,EAAE,EAAEA,EAAE;MACNK,KAAK,EAAEA;IACT,CAAC;IACDK,IAAI,EAAI;MACNC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE;IACR;EACF,CAAC;EACD,MAAMC,KAAK,GAAG,CAACC,EAAW,EAAEC,eAAwB,KAAK;IAEzDD,EAAE,CAACE,YAAY,CAACrB,KAAK,EAAEC,MAAM,CAAC,CAACqB,MAAM,CAACF,eAAe,CAAC;IACpDD,EAAE,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACfJ,EAAE,CAACK,SAAS,CAAC,IAAI,CAAC;IACpBL,EAAE,CAACM,UAAU,CAAC,SAAS,CAAC;IAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,IAAE,EAAE,EAAE;MAC/BP,EAAE,CAACQ,IAAI,CAACD,CAAC,EAAE,CAAC,EAAEA,CAAC,EAAE,IAAI,CAAC;IACxB;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,IAAE,EAAE,EAAE;MAC9BP,EAAE,CAACQ,IAAI,CAAC,CAAC,EAAED,CAAC,EAAE,IAAI,EAAEA,CAAC,CAAC;IACxB;IAEAf,KAAK,CAACC,KAAK,CAACJ,KAAK,GAAGA,KAAK;IACzBG,KAAK,CAACC,KAAK,CAACV,EAAE,GAAGA,EAAE;IACnBS,KAAK,CAACC,KAAK,CAACT,EAAE,GAAGA,EAAE;EACrB,CAAC;EACD,MAAMyB,SAAS,GAAIT,EAAW,IAAK;IACjCA,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;IAChB,IAAIL,GAAG,IAAIC,GAAG,EACZa,EAAE,CAACU,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,KAExBV,EAAE,CAACU,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IACzBV,EAAE,CAACT,IAAI,CAAC,UAAU,CAAC;IACnBS,EAAE,CAACI,MAAM,CAAC,UAAU,CAAC;IACrBJ,EAAE,CAACW,IAAI,CAAC,OAAO,GAAG5B,EAAE,GAAG,SAAS,GAAGC,EAAE,EAAG,GAAG,EAAC,EAAE,CAAC;IAC/CgB,EAAE,CAACW,IAAI,CAAC,kBAAkB,GAAGX,EAAE,CAACY,GAAG,GAAG,IAAI,EAAE,EAAE,EAAC,EAAE,CAAC;IAClDZ,EAAE,CAACW,IAAI,CAAC,kBAAkB,GAAGX,EAAE,CAACa,cAAc,GAAG,GAAG,EAAE,EAAE,EAAC,EAAE,CAAC;IAC5Db,EAAE,CAACW,IAAI,CAAC,+BAA+B,EAAE,EAAE,EAAC,EAAE,CAAC;IAC/CX,EAAE,CAACW,IAAI,CAAC,gCAAgC,EAAE,EAAE,EAAC,EAAE,CAAC;IAChDX,EAAE,CAACW,IAAI,CAAC,8BAA8B,EAAE,EAAE,EAAC,GAAG,CAAC;IAC/CX,EAAE,CAACW,IAAI,CAAC,2BAA2B,EAAE,EAAE,EAAC,GAAG,CAAC;IAC5CX,EAAE,CAACW,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAC,GAAG,CAAC;IAClC,IAAIxB,GAAG,EACP;MACEa,EAAE,CAACW,IAAI,CAAC,MAAM,GAAGnB,KAAK,CAACE,IAAI,CAACI,IAAI,GAAG,IAAI,GAAGN,KAAK,CAACE,IAAI,CAACG,IAAI,EAAE,EAAE,EAAC,GAAG,CAAC;IACpE;IACA,IAAIX,GAAG,EACP;MACEc,EAAE,CAACW,IAAI,CAAC,MAAM,GAAGnB,KAAK,CAACE,IAAI,CAACE,IAAI,GAAG,IAAI,GAAGJ,KAAK,CAACE,IAAI,CAACC,IAAI,EAAE,EAAE,EAAC,GAAG,CAAC;IACpE;EACF,CAAC;EACD,MAAMmB,iBAAiB,GAAId,EAAW,IAAM;IAC1C,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,EAAE,EAAEwB,CAAC,EAAE,EACzB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,EAAE,EAAE+B,CAAC,EAAE,EAC3B;MACE;MACA,IAAI1B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAAC;QAC1BP,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;QAChBS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACiB,MAAM,EAAE;MACb,CAAC,MACI,IAAI5B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAChC;QACEP,EAAE,CAACT,IAAI,CAAC,KAAK,CAAC;QACdS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACW,IAAI,CAAC,KAAK,EAAEJ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAEQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;QACvCf,EAAE,CAACiB,MAAM,EAAE;MACb,CAAC,MACI,IAAI5B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAChC;QACEP,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;QAChBS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACW,IAAI,CAAC,KAAK,EAAEJ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAEQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;QACvCf,EAAE,CAACiB,MAAM,EAAE;MACb,CAAC,MACI,IAAI5B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAChC;QACEP,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;QAChBS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACiB,MAAM,EAAE;MACb,CAAC,MACI,IAAI5B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAChC;QACEP,EAAE,CAACT,IAAI,CAAC,QAAQ,CAAC;QACjBS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACiB,MAAM,EAAE;MACb,CAAC,MAED;QACEjB,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;QAChBS,EAAE,CAACgB,MAAM,CAACT,CAAC,GAAG,EAAE,EAAEQ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;QAC7Bf,EAAE,CAACiB,MAAM,EAAE;MACb;IACF;IACF,IAAI7B,OAAO,EACX;MACEY,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;MAChB2B,YAAY,CAAC1B,KAAK,EAAEQ,EAAE,CAAC;IACzB;IACAS,SAAS,CAACT,EAAE,CAAC;EACf,CAAC;EACH;EACE,MAAMmB,QAAQ,GAAInB,EAAW,IAAK;IAC9B;IACA,IAAIvC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAIC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAI0D,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtB,IAAIC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtBrB,EAAE,CAACT,IAAI,CAAC,QAAQ,CAAC;IACjBS,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;IACnBsC,EAAE,CAACT,IAAI,CAAC,MAAM,CAAC;IACfS,EAAE,CAACgB,MAAM,CAACI,GAAG,EAAEC,GAAG,EAAE,EAAE,CAAC;IACvB;IACA,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EACzBlB,KAAK,CAAC,CAAC,EAAE,GAAGkB,CAAC,IAAIxB,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;EACnC,CAAC;EACD,MAAMuC,cAAc,GAAG,CAACtB,EAAW,EAAEuB,MAAY,KAAK;IACpD;IACA,IAAI9D,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAIC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAI0D,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtB,IAAIC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;;IAEtB;IACA,OAAOE,MAAM,CAACC,MAAM,GAAG,CAAC,EACxB;MACE,IAAIC,OAAO,GAAGF,MAAM,CAACA,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAACzD,KAAK;MAC7C;MACA;MACAsB,KAAK,CAACoC,OAAO,CAAC,GAAG,CAAC;MAClBF,MAAM,CAACG,GAAG,EAAE;IACd;IACA;IACA1B,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;IAChBS,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;IACnBsC,EAAE,CAACT,IAAI,CAAC,MAAM,CAAC;IACfS,EAAE,CAACgB,MAAM,CAACI,GAAG,EAAEC,GAAG,EAAE,EAAE,CAAC;EACzB,CAAC;EACH;EACE,MAAMM,IAAI,GAAI3B,EAAY,IAAK;IAE7B;IACA;IACEmB,QAAQ,CAACnB,EAAE,CAAC;IACZ,IAAIvC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAIC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpB,IAAI0D,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtB,IAAIC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACtB;IACA,MAAMO,IAAI,GAAG,EAAE;IACf;IACA,IAAIC,KAAK,GAAG,IAAIvC,KAAK,CAACP,EAAE,GAAGC,EAAE,CAAC,CAACO,IAAI,CAACpC,IAAI,CAAC;IACzC,IAAIoE,MAAM,GAAG,IAAIjC,KAAK,EAAE;IACxB,IAAIwC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACtE,CAAC,GAAGkE,IAAI,CAAC,GAAG7C,EAAE,GAAGgD,IAAI,CAACC,KAAK,CAACvE,CAAC,GAAGmE,IAAI,CAAC;IAC7D,IAAIK,IAAI,GAAIF,IAAI,CAACC,KAAK,CAACX,GAAG,GAAGO,IAAI,CAAC,GAAG7C,EAAE,GAAGgD,IAAI,CAACC,KAAK,CAACZ,GAAG,GAAGQ,IAAI,CAAC;;IAEhE;IACA,IAAIM,MAAM,GAAG,IAAI5C,KAAK,EAAE;IACxB,IAAI6C,IAAI,GAAG,IAAI7C,KAAK,EAAE;IACtB,IAAI/B,QAAQ,GAAG,IAAI+B,KAAK,CAACP,EAAE,GAAGC,EAAE,CAAC,CAACO,IAAI,CAAC,KAAK,CAAC;IAC7C,IAAI6C,QAAQ,GAAGN,MAAM;;IAEvB;IACE,OAAOP,MAAM,CAACC,MAAM,GAAG,CAAC,EAAED,MAAM,CAACG,GAAG,EAAE;IACtC,OAAOQ,MAAM,CAACV,MAAM,GAAG,CAAC,EAAEU,MAAM,CAACR,GAAG,EAAE;;IAExC;IACE,OAAOS,IAAI,CAACX,MAAM,GAAG,CAAC,EAAEW,IAAI,CAACT,GAAG,EAAE;IAClCG,KAAK,CAACC,MAAM,CAAC,GAAI,IAAI3E,IAAI,CAACO,CAAC,EAACD,CAAC,EAAC,IAAI,EAAEqE,MAAM,CAAC;IAC3CK,IAAI,CAACE,IAAI,CAACR,KAAK,CAACC,MAAM,CAAC,CAAC;IACxBP,MAAM,CAACc,IAAI,CAACR,KAAK,CAACC,MAAM,CAAC,CAAC;IAE1B,IAAIQ,IAAI,GAAG,CAAC;IACZ,OAAOH,IAAI,CAACX,MAAM,GAAG,CAAC,EACtB;MACE,IAAIc,IAAI,IAAI,GAAG,EACb;;MAEJ;MACE,IAAIH,IAAI,CAACX,MAAM,IAAI,CAAC,EACpB;QACEe,KAAK,CAAC,eAAe,CAAC;QACtB;MACF;MACF;MACE;MACA,IAAIC,GAAG,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACvE,CAAC;MACnB,IAAIG,KAAK,GAAG,CAAC;MACb,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4B,IAAI,CAACX,MAAM,EAAEjB,CAAC,EAAE,EACpC;QACE,IAAI4B,IAAI,CAAC5B,CAAC,CAAC,CAAC3C,CAAC,GAAG4E,GAAG,EACnB;UACEA,GAAG,GAAGL,IAAI,CAAC5B,CAAC,CAAC,CAAC3C,CAAC;UACfG,KAAK,GAAGwC,CAAC;QACX;MACF;MACA6B,QAAQ,GAAGD,IAAI,CAACpE,KAAK,CAAC,CAACA,KAAK;MAC5B;MACAmE,MAAM,CAACG,IAAI,CAACF,IAAI,CAACpE,KAAK,CAAC,CAAC;MACxB;;MAEA,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4B,IAAI,CAACX,MAAM,EAAEjB,CAAC,EAAE,EACpC;QACI4B,IAAI,CAACM,MAAM,CAAClC,CAAC,EAAE,CAAC,CAAC;MACrB;;MAEA;;MAEA,IAAI6B,QAAQ,KAAKH,IAAI,EACrB;QACEM,KAAK,CAAC,OAAO,CAAC;QACdnD,OAAO,GAAG,IAAI;QACd;MACF;MACF;MACE;MACA,IAAIsD,EAAE,GAAG,IAAIpD,KAAK,EAAE;MACpB,IAAIqD,GAAG,GAAG,IAAIxF,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,EAACiF,QAAQ,GAAGrD,EAAE,CAAC;MAC3C,IAAI6D,IAAI,GAAG,IAAIzF,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,EAAEiF,QAAQ,GAAG,CAAC,CAAC;MAC5C,IAAIS,IAAI,GAAG,IAAI1F,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,EAAEiF,QAAQ,GAAGrD,EAAE,CAAC;MAC7C,IAAI+D,IAAI,GAAG,IAAI3F,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,EAAEiF,QAAQ,GAAG,CAAC,CAAC;MAC5CM,EAAE,CAACL,IAAI,CAACM,GAAG,CAAC;MACZD,EAAE,CAACL,IAAI,CAACO,IAAI,CAAC;MACbF,EAAE,CAACL,IAAI,CAACQ,IAAI,CAAC;MACbH,EAAE,CAACL,IAAI,CAACS,IAAI,CAAC;;MAGb;MACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmC,EAAE,CAAClB,MAAM,EAAEjB,CAAC,EAAE,EAClC;QACE,IAAIlB,KAAK,CAACqD,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC,KAAKkE,IAAI,EAC7BM,KAAK,CAAC,WAAW,CAAC;QAEpB,IAAIG,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,IAAI,CAAC,IAAI2E,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,GAAGgB,EAAE,GAAGC,EAAE,IAAIK,KAAK,CAACqD,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC,KAAK,CAAC,IAAKR,QAAQ,CAACmF,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC,KAAK,KAAK,EAC7G;UACE,IAAIgF,OAAO,GAAG,IAAI5F,IAAI,CAACuF,EAAE,CAACnC,CAAC,CAAC,CAAC7C,CAAC,EAAEgF,EAAE,CAACnC,CAAC,CAAC,CAAC9C,CAAC,EAAE,IAAI,EAAEiF,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC;UAC3DgF,OAAO,CAAC3E,IAAI,CAAC2D,IAAI,CAACiB,GAAG,CAAClB,MAAM,GAAIY,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC,CAAC;UAC7CgF,OAAO,CAAC1E,IAAI,CAAC0D,IAAI,CAACiB,GAAG,CAACf,IAAI,GAAMS,EAAE,CAACnC,CAAC,CAAC,CAACxC,KAAK,CAAC,CAAC;UAC7CgF,OAAO,CAAC5E,IAAI,EAAE;UACd;UACAgE,IAAI,CAACE,IAAI,CAACU,OAAO,CAAC;QACpB;MACF;MACA;MACAE,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEZ,IAAI,EAAE,CAAE;IAC/B;IACA;IACA,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,MAAM,CAACV,MAAM,EAAEjB,CAAC,EAAE,EACpCgB,MAAM,CAACc,IAAI,CAACH,MAAM,CAAC3B,CAAC,CAAC,CAAC;IACxBe,cAAc,CAACtB,EAAE,EAAEuB,MAAM,CAAC;EAC9B,CAAC;EAGD,MAAM4B,YAAY,GAAInD,EAAW,IAAK;IACpC,IAAIA,EAAE,CAACY,GAAG,KAAK,GAAG,IAAI1B,GAAG,KAAK,KAAK,EACnC;MACEc,EAAE,CAACT,IAAI,CAAC,KAAK,CAAC;MACd,IAAI9B,CAAC,GAAGsE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACoD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvC,IAAI1F,CAAC,GAAGqE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACqD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvCJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAGzF,CAAC,EAAEC,CAAC,CAAC;MAC5BsC,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;MACnB,IAAIsC,EAAE,CAACa,cAAc,KAAK,IAAI,IAAIb,EAAE,CAACsD,WAAW,KAAKtD,EAAE,CAACuD,IAAI,EAC5D;QACEvD,EAAE,CAACT,IAAI,CAAC,QAAQ,CAAC;QACjBS,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;QACnB2B,KAAK,CAAC0C,IAAI,CAACC,KAAK,CAACtE,CAAC,GAAG,EAAE,CAAC,GAAGqB,EAAE,GAAGgD,IAAI,CAACC,KAAK,CAACvE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;QACvDyB,GAAG,GAAG,IAAI;QACVM,KAAK,CAACE,IAAI,CAACC,IAAI,GAAGlC,CAAC;QACnB+B,KAAK,CAACE,IAAI,CAACE,IAAI,GAAGlC,CAAC;QACnBsC,EAAE,CAACW,IAAI,CAAC,MAAM,GAAGlD,CAAC,GAAG,IAAI,GAAGC,CAAC,EAAE,EAAE,EAAC,GAAG,CAAC;;QAEtC;QACA;QACA;QACA;QACA;QACA;QACA;MACF;IACF;;IACA,IAAIsC,EAAE,CAACY,GAAG,KAAK,GAAG,IAAIzB,GAAG,KAAK,KAAK,EACnC;MAEEa,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;MAChB,IAAI9B,CAAC,GAAGsE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACoD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvC,IAAI1F,CAAC,GAAGqE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACqD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvCJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAGzF,CAAC,EAAEC,CAAC,CAAC;MAC5BsC,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;MAEnB,IAAIsC,EAAE,CAACa,cAAc,KAAK,IAAI,IAAIb,EAAE,CAACsD,WAAW,KAAKtD,EAAE,CAACuD,IAAI,EAC5D;QACEvD,EAAE,CAACT,IAAI,CAAC,QAAQ,CAAC;QACjBS,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;QACnB2B,KAAK,CAAC0C,IAAI,CAACC,KAAK,CAACtE,CAAC,GAAG,EAAE,CAAC,GAAGqB,EAAE,GAAGgD,IAAI,CAACC,KAAK,CAACvE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;QACvD0B,GAAG,GAAG,IAAI;QACVK,KAAK,CAACE,IAAI,CAACG,IAAI,GAAGpC,CAAC;QACnB+B,KAAK,CAACE,IAAI,CAACI,IAAI,GAAGpC,CAAC;QACnBsC,EAAE,CAACW,IAAI,CAAC,MAAM,GAAGlD,CAAC,GAAG,IAAI,GAAGC,CAAC,EAAE,EAAE,EAAC,GAAG,CAAC;;QAEtC;QACA;QACA;QACA;QACA;QACA;QACA;MACF;IACF;;IACA,IAAIsC,EAAE,CAACY,GAAG,KAAK,GAAG,EAClB;MACEZ,EAAE,CAACT,IAAI,CAAC,OAAO,CAAC;MAChB,IAAI9B,CAAC,GAAGsE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACoD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvC,IAAI1F,CAAC,GAAGqE,IAAI,CAACC,KAAK,CAAChC,EAAE,CAACqD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MACvCJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAGzF,CAAC,EAAEC,CAAC,CAAC;MAC5BsC,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;MAEnB,IAAIsC,EAAE,CAACa,cAAc,KAAK,IAAI,IAAIb,EAAE,CAACsD,WAAW,KAAKtD,EAAE,CAACuD,IAAI,EAC5D;QACEvD,EAAE,CAACT,IAAI,CAAC,QAAQ,CAAC;QACjBS,EAAE,CAACgB,MAAM,CAACvD,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;;QAEnB;QACA;QACA;QACE2B,KAAK,CAAC0C,IAAI,CAACC,KAAK,CAACtE,CAAC,GAAG,EAAE,CAAC,GAAGqB,EAAE,GAAGgD,IAAI,CAACC,KAAK,CAACvE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;QAEvD0B,GAAG,GAAG,IAAI;MACd;IAEF;IACA,IAAIa,EAAE,CAACY,GAAG,KAAK,GAAG,EAClB;MACE1B,GAAG,GAAG,KAAK;MACXC,GAAG,GAAG,KAAK;MACXC,OAAO,GAAG,KAAK;MAEf,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,EAAE,EAAEwB,CAAC,EAAE,EAC3B;QACE,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,EAAE,EAAE+B,CAAC,EAAE,EACzB,IAAI1B,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,IAAIlB,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,IAAIlB,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,KAAK,CAAC,EAC/ElB,KAAK,CAAC0B,CAAC,GAAGhC,EAAE,GAAGwB,CAAC,CAAC,GAAG,CAAC;MAC3B;MACA,IAAIiD,IAAI,GAAG,CAAC;MACZ,OAAOA,IAAI,GAAGnE,KAAK,CAACmC,MAAM,EAC1B;QACE,IAAInC,KAAK,CAACmE,IAAI,CAAC,KAAK,CAAC,EACnBnE,KAAK,CAACmE,IAAI,CAAC,GAAG,CAAC;QACfA,IAAI,EAAE;MACV;IAEF;IACA,IAAIxD,EAAE,CAACY,GAAG,KAAK,GAAG,IAAI1B,GAAG,KAAK,IAAI,IAAIC,GAAG,KAAK,IAAI,IAAIC,OAAO,KAAK,KAAK,EACvE;MACE8B,YAAY,CAAC1B,KAAK,EAAEQ,EAAE,CAAC;MACvBZ,OAAO,GAAG,IAAI;IAChB;IACA,IAAIY,EAAE,CAACY,GAAG,KAAK,GAAG,IAAIZ,EAAE,CAACY,GAAG,KAAK,GAAG,EACpC;MACEe,IAAI,CAAC3B,EAAE,CAAC;IACV;EACF,CAAC;EAED,MAAMyD,IAAI,GAAIzD,EAAW,IAAK;IAC5Bc,iBAAiB,CAACd,EAAE,CAAC;IACrBmD,YAAY,CAACnD,EAAE,CAAC;EACnB,CAAC;EACA,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA,wBACpB,QAAC,MAAM;MAAC,KAAK,EAAED,KAAM;MAAC,IAAI,EAAE0D;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACpC,QAAC,aAAa;MAAC,IAAI,EAAEjE,KAAK,CAACE;IAAK;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAG9B;AAEV;AAAC,KApYuBT,SAAS;AAsYjC,SAASyE,aAAa,CAACC,KAAY,EACnC;EACE,oBACE;IAAK,SAAS,EAAC,aAAa;IAAA,wBACxB;MAAA,UAAK;IAAe;MAAA;MAAA;MAAA;IAAA,QAAM,eAC1B;MAAK,SAAS,EAAC,OAAO;MAAA,WAAC,MAAI,EAACA,KAAK,CAACjE,IAAI,CAACC,IAAI,EAAC,KAAG,EAACgE,KAAK,CAACjE,IAAI,CAACC,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eACtE;MAAK,SAAS,EAAC,OAAO;MAAA,WAAC,MAAI,EAACgE,KAAK,CAACjE,IAAI,CAACG,IAAI,EAAC,KAAG,EAAC8D,KAAK,CAACjE,IAAI,CAACI,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAClE;AACZ;AAAC,MARQ4D,aAAa;AAStB,MAAMxC,YAAY,GAAG,CAAC0C,CAAS,EAAE5D,EAAW,KAAK;EAE/C,IAAIvC,CAAC,GAAGmG,CAAC,CAAClE,IAAI,CAACC,IAAI;EACnB,IAAIjC,CAAC,GAAGkG,CAAC,CAAClE,IAAI,CAACE,IAAI;EACnB,IAAIiE,EAAE,GAAGD,CAAC,CAAClE,IAAI,CAACG,IAAI;EACpB,IAAIiE,EAAE,GAAGF,CAAC,CAAClE,IAAI,CAACI,IAAI;EAEpBE,EAAE,CAACQ,IAAI,CAAC/C,CAAC,GAAG,EAAE,EAAEC,CAAC,GAAG,EAAE,EAAEmG,EAAE,GAAG,EAAE,EAAEC,EAAE,GAAG,EAAE,CAAC;AAC3C,CAAC;AAAA,MARK5C,YAAY;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}