[{"/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/index.tsx":"1","/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/reportWebVitals.ts":"2","/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/App.tsx":"3","/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx":"4"},{"size":560,"mtime":1673744657099,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1673732781208,"results":"7","hashOfConfig":"6"},{"size":288,"mtime":1673802261208,"results":"8","hashOfConfig":"6"},{"size":10490,"mtime":1673896619329,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c0jtpd",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":4,"source":"23"},"/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/index.tsx",[],[],"/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/reportWebVitals.ts",[],[],"/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/App.tsx",["24"],[],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h2>Path finding algorithme simulation</h2> */}\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/alchemist/Desktop/PathFinderAlgorithmeP5/src/Dashboard.tsx",["25","26","27","28","29","30","31","32","33","34","35","36"],[],"import React, {useState} from 'react';\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport './Dashboard.css';\nimport { wait } from '@testing-library/user-event/dist/utils';\n\nconst   width = 1440;\nconst   height = 800;\nconst   Xb = width / 20;\nconst   Yb = height / 20;\n\nexport interface Props {\n  data: {\n    // name: string;\n    expX: number;\n    expY: number;\n    sepX: number;\n    sepY: number;\n  }\n}\n\nexport default function Dashboard()\n{\n  var     exp = false;\n  var     sep = false;\n  var     isFound = false;\n  let     Board =  new Array(Xb * Yb).fill(0);\n\n  // acces with Board[y * Xb + x]\n  var state = {\n    board:{\n      Xb: Xb,\n      Yb: Yb,\n      Board: Board\n    },\n    data :  {  \n      expX: 0,\n      expY: 0,\n      sepX: 0,\n      sepY: 0\n    }\n  }\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\n    p5.stroke(50); // Set line drawing color to white\n    p5.frameRate(1000);\n\t\tp5.background('#222222')\n\n    for (let i = 0; i < 1400; i+=20) {\n      p5.line(i, 0, i, 1400);\n    }\n    for (let i = 0; i < 680; i+=20) {\n      p5.line(0, i, 1400, i);\n    }\n\n    state.board.Board = Board;\n    state.board.Xb = Xb;\n    state.board.Yb = Yb;\n  }\n  const infoBoard = (p5: p5Types) => {\n    p5.fill(\"white\");\n    if (exp || sep)\n      p5.rect(0, 0, 230, 200);\n    else \n      p5.rect(0, 0, 230, 150);\n    p5.fill(\"darkblue\");\n    p5.stroke(\"darkblue\");\n    p5.text(\"Xb : \" + Xb + \" , Yb :\" + Yb , 130,20);\n    p5.text(\"key pressed : [ \" + p5.key + \" ]\", 20,20);\n    p5.text(\"mouse presse : [\" + p5.mouseIsPressed + \"]\", 20,40);\n    p5.text(\"Press s : select first square\", 20,60);\n    p5.text(\"Press e : select second square\", 20,80);\n    p5.text(\"Press w : select wall square\", 20,100);\n    p5.text(\"Press p : Use Path Finder\", 20,120);\n    p5.text(\"Press r : Reset\", 20,140);\n    if (sep)\n    {\n      p5.text(\"Y : \" + state.data.sepY + \", \" + state.data.sepX, 20,170)\n    }\n    if (exp)\n    {\n      p5.text(\"X : \" + state.data.expY + \", \" + state.data.expX, 20,190)\n    }\n  }\n  const drawBoardElements = (p5: p5Types ) => {\n    for (let i = 0; i < Xb; i++) \n      for (let j = 0; j < Yb; j++) \n      {\n        // white 0; red 2; green 3; brown 4; yellow 8;  black;\n        if (Board[j * Xb + i] === 0){\n          p5.fill(\"white\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 2)\n        {\n          p5.fill(\"red\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" X \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 3)\n        {\n          p5.fill(\"green\");\n          p5.square(i * 20, j * 20, 20);\n          p5.text(\" Y \", i * 20 + 3, j * 20 + 16);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 4)\n        {\n          p5.fill(\"brown\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else if (Board[j * Xb + i] === 8)\n        {\n          p5.fill(\"orange\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n        else\n        {\n          p5.fill(\"black\");\n          p5.square(i * 20, j * 20, 20);\n          p5.noFill();\n        }\n      }\n    if (isFound)\n    {\n      p5.fill(\"black\");\n      FindYourPath(state, p5);\n    }\n    infoBoard(p5);\n  }\n\n  const handleAction = (p5: p5Types) => {\n    if (p5.key === 's' && exp === false)\n    {\n      p5.fill(\"red\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20)\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 2;\n        exp = true;\n        state.data.expX = x;\n        state.data.expY = y;\n        p5.text(\"X : \" + x + \", \" + y, 20,170);\n\n        // setstate({\n        //   data :  { \n        //     expX: state.data.expX,\n        //     expY: state.data.expY,\n        //     sepX: x,\n        //     sepY: y,\n        //   }})\n      }\n    }\n    if (p5.key === 'e' && sep === false)\n    {\n\n      p5.fill(\"green\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n        Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 3;\n        sep = true;\n        state.data.sepX = x;\n        state.data.sepY = y;\n        p5.text(\"Y : \" + x + \", \" + y, 20,190);\n\n        // setstate({\n        //   data :  {  \n        //     expX: x,\n        //     expY: y,\n        //     sepX: state.data.sepX,\n        //     sepY: state.data.sepY,\n        //   }})\n      }\n    }\n    if (p5.key === 'w')\n    {\n      p5.fill(\"brown\");\n      let x = Math.round(p5.mouseX / 20) * 20;\n      let y = Math.round(p5.mouseY / 20) * 20;\n      console.log(\"hello \" , x, y);\n      p5.square(x, y, 20);\n\n      if (p5.mouseIsPressed === true && p5.mouseButton === p5.LEFT)\n      {\n        p5.fill(\"yellow\");\n        p5.square(x, y, 20);\n\n        // if (Board[Math.round(y / 20) * Xb + Math.round(x / 20)] == 4)\n        //   Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 0;\n        // else\n          Board[Math.round(y / 20) * Xb + Math.round(x / 20)] = 4;\n\n          sep = true;\n      }\n   \n    }\n    if (p5.key === 'r')\n    {\n      exp = false;\n      sep = false;\n      isFound = false;\n\n      for (let i = 0; i < Xb; i++) \n      {\n        for (let j = 0; j < Yb; j++) \n          if (Board[j * Xb + i] === 2 || Board[j * Xb + i] === 3 || Board[j * Xb + i] === 4)\n            Board[j * Xb + i] = 0;\n      }\n      let curr = 0\n      while (curr < Board.length)\n      {\n        if (Board[curr] === 8)\n          Board[curr] = 0;\n          curr++\n      }\n\n    }\n    if (p5.key === 'p' && exp === true && sep === true && isFound === false)\n    {\n      FindYourPath(state, p5);\n      isFound = true;\n    }\n    if (p5.key === 'ñ')\n    {\n      // init default variables \n      var x = 13 * 20 - 20;\n      var y = 10 * 20 - 20;\n      var dx2 = 71 * 20 - 20 ;\n      var dy2 = 39 * 20 - 20;\n      p5.fill(\"orange\");\n      p5.square(x, y, 20);\n      p5.fill(\"grey\");\n      p5.square(dx2, dy2, 20);\n      // walls \n      for (var i = 0; i < 20; i++)\n        Board[(10 + i) * Xb + 29] = 4;\n\n      // BFS \n      // white 0; red 2; green 3; brown 4; yellow 8;  black;\n      const unit = 20;\n      const _board = Board\n      var _visited = new Array(Xb * Yb).fill(false)\n      var _queue = new Array()\n      var _queue1 = new Array()\n      var _path = new Array()\n      var _parent = new Array(Xb * Yb).fill(-1)\n      var _start = Math.round(y / unit) * Xb + Math.round(x / unit)\n      var _end = Math.round(dy2 / unit) * Xb + Math.round(dx2 / unit)\n      var _current = _start\n\n      // set queue\n      while (_queue.length > 0) _queue.pop()\n      while (_queue1.length > 0) _queue1.pop()\n      while (_path.length > 0) _path.pop()\n      while (_parent.length > 0) _parent.pop()\n\n      var dis = _end - _start\n      var dir = dis > 0 ? 1 : -1\n      dis = Math.abs(dis)\n    \n      _queue.push(_start)\n      _visited[_start] = true\n\n\n      BFS()\n\n\n      // draw path\n      while (_queue.length > 0)\n      {\n        var current = _queue[_queue.length - 1]\n        // p5.fill(\"orange\");\n        // p5.square((current % Xb) * unit, Math.floor(current / Xb) * unit, unit);\n        Board[current] = 8;\n        _queue.pop()\n      }\n      // drawing squars\n      p5.fill(\"green\");\n      p5.square(x, y, 20);\n      p5.fill(\"grey\");\n      p5.square(dx2, dy2, 20);\n    }\n  }\n\n  const draw = (p5: p5Types) => {\n    drawBoardElements(p5)\n    handleAction(p5)\n\t}\n  return(\n    <div className='board'>\n      <Sketch setup={setup} draw={draw} />\n      <VisualizeData data={state.data}/>\n      {/* <div className='cordX'>X : {state.data.expX} , {state.data.expX}</div>\n      <div className='cordY'>Y : {state.data.sepX} , {state.data.sepY}</div> */}\n    </div>\n  )\n}\n\nfunction VisualizeData(props: Props)\n{\n  return (\n    <div className='board__info'>\n        <div>Dashboard Infos</div>\n        <div className='cordX'>X : {props.data.expX} , {props.data.expX}</div>\n        <div className='cordY'>Y : {props.data.sepX} , {props.data.sepY}</div>\n      </div>);\n}\nconst FindYourPath = (X : Props, p5: p5Types) => {\n\n  let x = X.data.expX;\n  let y = X.data.expY;\n  let x2 = X.data.sepX;\n  let y2 = X.data.sepY;\n\n  p5.line(x + 10, y + 10, x2 + 10, y2 + 10);\n}\n\ninterface Point {\n  i: number;\n  j: number;\n}\n\nfunction BFS ()\n{\n\n  // var dx :   = {{1, 1, 1, 0, 0, -1, -1, -ç1}  //Arrays for up, down, right, left movement\n  // var dy : number   = {-1, 0, 1, -1, 1, -1, 0, 1}\n\n// public static void main(String[] args) {\n//       int[][] traverse = {\n//           {1,  2,  3,  4,  5},\n//           {6,  7,  8,  9,  10},\n//           {11, 12, 13, 14, 15},\n//           {16, 17, 18, 19, 20},\n//           {21, 22, 23, 24 ,25}\n//       }; //The array to traverse\n\n//       boolean[][] visited = new boolean[5][5]; //Visited boolean array\n//       Queue<Point> q = new LinkedList<>();\n//       q.add(new Point(2, 2));\n//       visited[2][2] = true; //setting the start cell as visited\n  var Point : Point = {i: 0, j: 0}\n  var dx = [1, 0, -1, 0];\n  var dy = [0, 1, 0, -1];\n  const traverse = [\n    [1,  2,  3, 4 , 5],\n    [6,  7,  8,  9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24 ,25]\n  ]\n\n  var visited = new Array(5 * 5).fill(false)\n  var q = new Array()\n\n  Point.i = 0;\n  Point.j = 0;\n  q.push(Point)\n  visited[0] = true\n  \n\n  // while (q.length > 0)\n  // {\n  //   let s = q.length\n  //   for (let i = 0; i < s; i++)\n  //   {\n  //     Point = q.shift()\n  //     console.log(traverse[Point.i][Point.j])\n     \n  //     for (let j = 0; j < 4; j++)\n  //     {\n  //       let newi = Point.i + dx[j]\n  //       let newj = Point.j + dy[j]\n        \n  //       if (newi < 0 || newi >= traverse.length || newj < 0 || newj >= traverse[0].length) continue;\n  //       if (visited[newi + newj]) continue;\n        \n  //       q.push({i: newi, j: newj})\n  //       visited[newi + newj] = true\n  //     }\n  //     console.log(\" , \")\n  //   }\n  // }\n  // alert(\"End\")\n  // console.log(\" End \")\n\n  return (\n    <h1>\n      Hello  Worldasdasdasdaerluighalyejsbgrjkahsebfgjahsbefjh\n    </h1>\n  );\n}",{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":12},{"ruleId":"37","severity":1,"message":"41","line":1,"column":16,"nodeType":"39","messageId":"40","endLine":1,"endColumn":24},{"ruleId":"37","severity":1,"message":"42","line":5,"column":10,"nodeType":"39","messageId":"40","endLine":5,"endColumn":14},{"ruleId":"37","severity":1,"message":"43","line":258,"column":13,"nodeType":"39","messageId":"40","endLine":258,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":260,"column":20,"nodeType":"46","messageId":"47","endLine":260,"endColumn":31,"fix":"48"},{"ruleId":"44","severity":1,"message":"45","line":261,"column":21,"nodeType":"46","messageId":"47","endLine":261,"endColumn":32,"fix":"49"},{"ruleId":"44","severity":1,"message":"45","line":262,"column":19,"nodeType":"46","messageId":"47","endLine":262,"endColumn":30,"fix":"50"},{"ruleId":"37","severity":1,"message":"51","line":266,"column":11,"nodeType":"39","messageId":"40","endLine":266,"endColumn":19},{"ruleId":"37","severity":1,"message":"52","line":275,"column":11,"nodeType":"39","messageId":"40","endLine":275,"endColumn":14},{"ruleId":"37","severity":1,"message":"53","line":360,"column":7,"nodeType":"39","messageId":"40","endLine":360,"endColumn":9},{"ruleId":"37","severity":1,"message":"54","line":361,"column":7,"nodeType":"39","messageId":"40","endLine":361,"endColumn":9},{"ruleId":"37","severity":1,"message":"55","line":362,"column":9,"nodeType":"39","messageId":"40","endLine":362,"endColumn":17},{"ruleId":"44","severity":1,"message":"45","line":371,"column":11,"nodeType":"46","messageId":"47","endLine":371,"endColumn":22,"fix":"56"},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'wait' is defined but never used.","'_board' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"57","text":"58"},{"range":"59","text":"58"},{"range":"60","text":"58"},"'_current' is assigned a value but never used.","'dir' is assigned a value but never used.","'dx' is assigned a value but never used.","'dy' is assigned a value but never used.","'traverse' is assigned a value but never used.",{"range":"61","text":"58"},[6691,6702],"[]",[6723,6734],[6753,6764],[9652,9663]]